name: GitHub Actions Main
run-name: GitHub Actions by @${{ github.actor }}

# on: [push, pull_request]
on:
  pull_request:
  push:
    branches: ['main']

jobs:
  Initial:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: View context attributes
        uses: actions/github-script@v7
        with:
          script: console.log(context)
      - uses: actions/github-script@v7
        id: update_label
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        with:
          script: |
            const isFeature = process.env?.BRANCH_NAME.toLowerCase().startsWith('feature') || process.env?.BRANCH_NAME.toLowerCase().startsWith('feat');
            const isBug = process.env?.BRANCH_NAME.toLowerCase().startsWith('fix');
            const isHotfix = process.env?.BRANCH_NAME.toLowerCase().startsWith('hotfix');
            const isRelease = process.env?.BRANCH_NAME.toLowerCase().startsWith('release');

            let labels = [];
            if (isFeature) labels.push('enhancement');
            if (isBug) labels.push('bug');
            if (isHotfix) labels.push('hotfix');
            if (isRelease) labels.push('release');

            if (context.issue?.number) { 
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels
              })
            }
            return  process.env?.BRANCH_NAME
          result-encoding: string
      - name: Result from github-script
        run: echo 'Pull Request id ${{steps.update_label.outputs.result}}'
  ESLint:
    needs: Initial
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependenies
        run: npm install
      - name: Run ESLint
        id: lint_and_report
        continue-on-error: true
        run: npm run lint:ci --silent > ./lint_reports.txt
      - name: Log reports and check outcome
        id: build_lint_reports
        run: |
          echo outcome: ${{ steps.lint_and_report.outcome }}
          if [[ "${{ steps.lint_and_report.outcome }}" == 'success' ]]; then
            echo 'âœ… Lint All Passed' > ./lint_reports.txt
          else
            echo 'ðŸ˜¡ðŸ˜¡ðŸ˜¡ðŸ˜¡ðŸ˜¡ Lint Error...' >> ./lint_reports.txt
          fi
      - name: Save ESLint result
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: lint_reports
          path: ./lint_reports.txt
      - name: Log reports and check outcome
        run: |
          echo outcome: ${{ steps.lint_and_report.outcome }}
          if [[ "${{ steps.lint_and_report.outcome }}" == 'success' ]]; then
            exit 0
          else
            exit 1
          fi
  UnitTest:
    needs: Initial
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependenies
        run: npm install
      - name: Run Test
        id: test_and_report
        # Grep 4 rows after "Test Suites", that's final info
        run: |
          npm run test:ci --silent > ./test_reports.txt 2>> ./test_reports.txt
        continue-on-error: true
      - name: Save Test result
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: test_reports
          path: ./test_reports.txt
      - name: Log reports and check outcome
        run: |
          echo outcome: ${{ steps.test_and_report.outcome }}
          if [[ "${{ steps.test_and_report.outcome }}" == 'failure' ]]; then
            exit 1
          else
            exit 0
          fi
  Build:
    needs: ['ESLint', 'UnitTest']
    runs-on: ubuntu-latest
    outputs:
      artifactId: ${{ steps.artifact-upload-step.outputs.artifact-id }}
      artifactUrl: ${{ steps.artifact-upload-step.outputs.artifact-url }}
    steps:
      - name: Hello
        run: echo "Hello ${{ github.repository }} repository"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependenies
        run: npm install
      - name: Build Artifacts
        run: npm run build
      - uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: dist
          path: dist/
      - name: Set summary
        run: echo "GitHub Actions workflows has done. ðŸš€" >> $GITHUB_STEP_SUMMARY
  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      artifactId: ${{needs.build.outputs.artifactId}}
      artifactUrl: ${{needs.build.outputs.artifactUrl}}
    steps:
      - name: Log Artifact ID
        run: echo "Artifact ID from previous job is $artifactId" >> $GITHUB_STEP_SUMMARY
      - name: Log Artifact URL
        run: echo "Artifact URL from previous job is $artifactUrl" >> $GITHUB_STEP_SUMMARY
      - name: Deploy
        run: echo "Run some scripts to deploy artifact"
  report:
    needs: ['ESLint', 'UnitTest']
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    if: ${{ always() }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        name: Download All Artifacts
        with:
          path: download
      # - name: List download files
      #   id: download-reports
      #   run: |
      #     # ls -R download
      # - name: View context attributes
      #   uses: actions/github-script@v7
      #   with:
      #     script: console.log(context)
      - uses: actions/github-script@v7
        id: update_pull_request_comment
        with:
          script: |
            const fs = require('fs');
            const lintReportsFilePath = 'download/lint_reports/lint_reports.txt';
            const testReportsFilePath = 'download/test_reports/test_reports.txt';
            const lintReportsFile = fs.readFileSync(lintReportsFilePath, 'utf8');
            const testReportsFile = fs.readFileSync(testReportsFilePath, 'utf8');

            console.log('lint File content:\n', lintReportsFile);
            console.log('test File content:\n', testReportsFile);

            const now = new Date().toLocaleString('zh', { timeZone: 'Asia/Taipei' });
            const commentContent = `Created from Github Actions ðŸ‘‹  ${now} \n \`\`\`\n${lintReportsFile}\`\`\` \n \`\`\`\n${testReportsFile}\`\`\` `

            if (!context.issue?.number) {
              return;
            }

            const { data: list_comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            // comment.user.login === 'github-actions[bot]'
            const bot_comment = list_comments.find(c => c.user.type === 'Bot' && c.user.id == 41898282 );

            if (bot_comment?.id) {
              // const data = await github.rest.issues.updateComment({
              //   owner: context.repo.owner,
              //   repo: context.repo.repo,
              //   comment_id: bot_comment.id,
              //   body: commentContent
              // });
              // console.log('updateComment data', data);
              
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: bot_comment.id
              });
              console.log('Delete comment id', bot_comment.id);
            }

            const { data } = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentContent
            })
            console.log('Create comment id', data.id);

            return data.id;
          result-encoding: string
      - name: Log pull request comment id
        run: echo 'New created comment id ${{steps.update_pull_request_comment.outputs.result}}'
